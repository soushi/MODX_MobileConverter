//------------------------------------------------------------------------
//
//  MobileConverter for MODX
//
//  Author  : soushi
//  Version : 2.01rc1
//  Date    : 2011/09/18
//
//  License : GPL
//
//------------------------------------------------------------------------

//--------This plugin name
$MyName=$modx->Event->activePlugin;

// Template
$TemplateNotFound=<<<_TPLNOTFOUND_
<html>
<head>
  <title>[(site_name)] | [*pagetitle*]</title>
  <meta http-equiv="Content-Type" content="text/html; charset=[+charset+]" />
  <base href="[(site_url)]" />
</head>
<body>
<h2>Template not found! -> [+template+]</h2>
/* Check the setting of plugin;-) */
</body>
</html>
_TPLNOTFOUND_;

//Image ext
$imgExts=array('jpe?g','gif','png','gif');
//image filename prefix
$imgPrefix='.mcthumb.'; 

//------------------------------------------------------ Function
//-----------------------------------------------------
//  add Event function
//
//  $fEvent  : string : event name
//  $fPlugin : string : plugin name
//  return   : none   :
//
// *** information ***
// Not executed $modx->addEventListener for BUG(modx <=0.9.6.2 ,modx <= 1.0.0)
//
//-----------------------------------------------------
if (!function_exists('addEvent')){
  function addEvent($fEvent,$fPlugin){
    global $modx;

    $el= &$modx->pluginEvent[$fEvent];
    if (empty ($el)){
      $modx->pluginEvent[$fEvent]= array ();
      $el= &$modx->pluginEvent[$fEvent];
    }
    array_push($el, $fPlugin);
  }
}

//-----------------------------------------------------
//  Image chaange function("preg_replace_callback" function's callback)
//
//  $fMt   : array  : replace string
//  return : string : replace string
//
//-----------------------------------------------------
if (!function_exists('MC_ChangeImgFilename')){
  function MC_ChangeImgFilename($fMt){
    global $modx;

    $mcConf = $modx->config['MobileConverterConf'];
    if(! preg_match('/src=["\']?([^"\' ]*?)?([^\/"\' ]+)\.([^\.\/"\' >]+)/i',$fMt[0],$mt) )
          return $fMt[0];
    $imgPath=$mt[1];
    $imgName=$mt[2];
    $imgExt=$mt[3];

    //Ext check
    $imgcheck=false;
    foreach( $mcConf['imgExts'] as $val)
      if( preg_match('/'.$val.'$/i',$imgExt) ){
	$imgcheck=true;
	break;
      }
    if($imgcheck != true ) return $fMt[0];

    //変換対象のパス確認
    $flag=false;
    foreach( $mcConf['imgPath'] as $key => $val ){
      if( $val == '/' || strstr($imgPath,$val) !== false){
	$imgNo = $key;
	$flag = true;
	break;
      }
    }
    if(! $flag ) return $fMt[0];

    //本体画像の存在確認
    $realFile = realpath(MODX_BASE_PATH . $imgPath . $imgName . '.' . $imgExt );
    if(! is_file($realFile) ){
      return $fMt[0];
    }
    $realFileTime = filemtime($realFile); //ファイルの更新時間

    //パスの計算
    if( isset($mcConf['imgNum'])){
      $addNum = $mcConf['imgNum'].'_';
    }else{
      $addNum = '';
    }
    if( $mcConf['thumbImgPath'] === false ){
      $chgFile = $imgPath . $mcConf['imgPrefix'] . $mcConf['groupNo'] . '_' . $addNum . $imgName .'.'. $mcConf['imgType'];
    }else{
      $chgFile = $mcConf['thumbImgPath'] . $mcConf['imgPrefix'] . $mcConf['groupNo'] . '_' . $addNum . str_replace('/','_',$imgPath).$imgName .'.'. $mcConf['imgType'];
    }
    //$realChgFile = realpath(MODX_BASE_PATH . $chgFile); //realpathでエラーがでるため一時コメントアウト
    $realChgFile = MODX_BASE_PATH . $chgFile;

    //変換画像作成
    if(! is_file($realChgFile)  || is_file($realChgFile) && filemtime($realChgFile) < $realFileTime ){      

      $img=imagecreatefromstring(file_get_contents($realFile));
      //リサイズ計算
      if( isset($mcConf['imgMaxX'][$imgNo]) ){
	$maxX = $mcConf['imgMaxX'][$imgNo];
      }else{
	$maxX = $mcConf['imgMaxX'][0]; //配列がなければ0をデフォルトの値にする
      }
      if( isset($mcConf['imgMaxY'][$imgNo]) ){
	$maxY = $mcConf['imgMaxY'][$imgNo];
      }else{
	$maxY = $mcConf['imgMaxY'][0]; //配列がなければ0をデフォルトの値にする
      }
      $imgX = imagesx($img);
      $imgY = imagesy($img);
      $toX=0;
      $toY=0;
      if( $maxX != 0 && $maxX < $imgX ){
	$toX = $maxX;
	$toY = (int)($imgY * ($maxX / $imgX));
      }
      if( $maxY != 0 && $maxY < $imgY ){
	$tmpX = (int)($imgX * ($maxY / $imgY));
	if( $maxX > $tmpX ){
	  $toX = $tmpX;
	  $toY = $maxY;
	}
      }
      if( $toX != 0 && $toY != 0){ //リサイズ実行
	$newimg=imagecreatetruecolor($toX,$toY);       
	imagecopyresampled($newimg,$img,0,0,0,0,$toX,$toY,$imgX,$imgY);
	imagedestroy($img);
	$img = $newimg;
      }

      switch($mcConf['imgType']){
      case 'gif': // make gif	
	if( function_exists('imagegif'))
	  if( ! imagegif($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make gif image:'.$realChgFile, 'MobileConverter');
	break;
      case 'png': // make png
	if( function_exists('imagepng'))
	  if( ! imagepng($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make png image:'.$realChgFile, 'MobileConverter');
	break;
      case 'jpg':
      case 'jpeg':// make jpg
	if( function_exists('imagejpeg'))
	  if( ! imagejpeg($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make jpg image:'.$realChgFile, 'MobileConverter');
	break;
      }
    }

    $newA = preg_replace('/src=["\']?[^"\' >]+["\']?/i',"src='$chgFile'",$fMt[0]);
    //erase height and width 
    $newA = preg_replace('/width=[^ >]+/i','',$newA);
    $newA = preg_replace('/height=[^ >]+/i','',$newA);

    return $newA;

  }
}

//------------------------------------------------------ Main
switch ($modx->Event->name){

//--------------------------------------------------------------Check target
case 'OnWebPageInit': 

  $id = $modx->documentIdentifier; //Current document id

  // トップ階層までリソースIDを求める
  $ids = array();
  array_push($ids,$id);
  while( $id != 0 ){
    $parentData = $modx->getParent($id,0,'id');
    if(! $parentData ){
      break;
    }    
    $id = $parentData['id'];
    array_push($ids,$id);
  }

  //リソースがターゲットになるか判定
  $mcFlag=false;
  $i=1;
  while( isset(${'g'.$i.'_targetDoc'}) ){
    if( ${'g'.$i.'_targetDoc'} == '' || ${'g'.$i.'_targetDoc'} == 0){
      // 0の場合はON判定
      $mcFlag= true;
      break;
    }else{
      $targetDocs=explode(',',${'g'.$i.'_targetDoc'});
      foreach ($targetDocs as $targetDoc){
	if(! preg_match('/^[+-]?[0-9]+[rR]?$/',$targetDoc)){
	  $modx->logEvent(1, 1, 'Syntax error in Target IDs:'.$targetDoc, 'MobileConverter');
	  continue;
	}
	$keyPos = stripos($targetDoc,'r');
	if( $keyPos !== false){
	  $recFlag = substr($targetDoc,-1,1); //後ろの記号を取得
	  $targetDoc = substr($targetDoc,0,-1); //後ろのrRは削除
	}else{
	  //再帰不要なとき
	  if( $targetDoc >= 0 && $ids[0] == $targetDoc){
	    $mcFlag=true;
	  }
	  if( $targetDoc < 0 && $ids[0] == abs($targetDoc)){
	    $mcFlag=false;
	  }	    
	  continue;
	}
	//再帰が必要なとき
	foreach( $ids as $id ){
	  if( $recFlag == 'R' && $ids[0] == $id ){ //大文字Rの時は対象ドキュメントを含まない
	    continue;
	  }

	  if( $targetDoc >= 0 && $id == $targetDoc ){
	    $mcFlag=true;
	    break;
	  }
	  if( $targetDoc < 0 && $id == abs($targetDoc)){
	    $mcFlag=false;
	    break;
	  }    	  	  
	}     
      }
      if( $mcFlag == true ){
	break;
      }
    }
    $i++;
  }
  
  if( $mcFlag == true){
    //次のイベントで利用する変数の決定
    $mcConf = '';    
    $mcConf['groupNo'] = $i; //グループNo
    
    //判定用の添字決定($_SERVERの添字)
    $mcConf['targetKey'] = isset(${'g'.$i.'_targetKey'}) ? ${'g'.$i.'_targetKey'} : 'HTTP_USER_AGENT';

    $modx->config['MobileConverterConf'] = $mcConf;
    addEvent('OnLoadWebDocument', $MyName);
    addEvent('OnWebPagePrerender', $MyName);
  }elseif( $enableCharConvIfnoElect == 'yes' ){ //文字コード変換だけ行う場合
    $mcConf = '';    
    $mcConf['enableCharConv'] = true;
    $mcConf['charset'] = isset($charset) ? $charset : 'Shift_JIS';
    $modx->config['MobileConverterConf'] = $mcConf;
    addEvent('OnWebPagePrerender', $MyName);
  }

  break;

//--------------------------------------------------------------Change template and set convert event
case 'OnLoadWebDocument':
   
  //キャッシュは強制的にOFF
  $modx->documentObject['cacheable'] = 0;

  //前のイベントから引き継いだ変数読み出し
  $mcConf = $modx->config['MobileConverterConf'];
  $groupNo = $mcConf['groupNo'];
  //テンプレート切り替え基準の変数決定
  $targetKey = $mcConf['targetKey'];
  $targetVal = $_SERVER[$targetKey];

  //切り替えの判定
  $i=1;
  while( isset(${'g'.$groupNo.'_'.$i.'_matchStr'}) ){

    $matchStrs = ${'g'.$groupNo.'_'.$i.'_matchStr'};
    if( $matchStrs == '' ) continue;
    $matchStrs = explode(',',$matchStrs);
    foreach ($matchStrs  as $matchStr)
      if( (${'g'.$groupNo.'_useReg'} != 'yes' && stristr($targetVal , $matchStr) !== false)
	  || (${'g'.$groupNo.'_useReg'} == 'yes' && preg_match($matchStr,$targetVal) != 0)){

	$switchTemplate = ${'g'.$groupNo.'_'.$i.'_template'};
	$switchImgType  = ${'g'.$groupNo.'_'.$i.'_imgType'};
	$switchCharset  = ${'g'.$groupNo.'_'.$i.'_charset'};
	$switchEnableCC = ${'g'.$groupNo.'_'.$i.'_enableCharConv'};
	if( isset(${'g'.$groupNo.'_'.$i.'_imgMaxX'})){
	  $switchImgMaxX  = ${'g'.$groupNo.'_'.$i.'_imgMaxX'};
	  $switchImgNum = $i;
	}
	if( isset(${'g'.$groupNo.'_'.$i.'_imgMaxY'})){
	  $switchImgMaxY  = ${'g'.$groupNo.'_'.$i.'_imgMaxY'};
	  $switchImgNum = $i;
	}

	$tbl = $modx->getFullTableName("site_templates");
	$whr = 'templatename=\''.$switchTemplate.'\'';
	if( $rs = $modx->db->select('id,content',$tbl,$whr) ){
	  if( $resource = $modx->fetchRow($rs) ){
	    $modx->documentObject['template'] = $resource['id'];
	    $this->documentContent =  $resource['content'];
	  }else{
	    $modx->logEvent(1, 1, 'Template not found:'.$switchTemplate, 'MobileConverter');
	    $bf= array('[+charset+]','[+template+]');
	    $af= array($modx->config['modx_charset'],$switchTemplate);
	    $TemplateNotFound = str_replace($bf,$af,$TemplateNotFound);
	    $this->documentContent =  $TemplateNotFound;	     
	  }
	}
	break 2;
      }
    $i++;
  }
  if(! isset(${'g'.$groupNo.'_'.$i.'_matchStr'}) ){ //切り替えが発生しなかったら終了
    break;
  }

  //文字コードの決定
  if( $switchCharset != '' ){
    $mcConf['charset'] = $switchCharset;
  }else{
    $mcConf['charset'] = isset($charset) ? $charset : 'Shift_JIS';
  }

  //文字コード変換の有無
  if( $switchEnableCC == 'no' ){
    $mcConf['enableCharConv'] = false;
  }else{
    $mcConf['enableCharConv'] = true;
  }

  if( isset($switchImgType) && $switchImgType != '' ){
    $mcConf['imgType'] = $switchImgType;
    $mcConf['imgExts'] = $imgExts;
    $mcConf['imgPrefix'] = $imgPrefix;
    $imgPath = isset($imgPath) && $imgPath != '' ? $imgPath : '/';
    $imgPath = isset( ${'g'.$groupNo.'_imgPath'} ) ? ${'g'.$groupNo.'_imgPath'} : $imgPath;
    $imgMaxX = isset($imgMaxX) && $imgMaxX != '' ? $imgMaxX : 0;
    $imgMaxX = isset( ${'g'.$groupNo.'_imgMaxX'} ) ? ${'g'.$groupNo.'_imgMaxX'} : $imgMaxX;
    $imgMaxX = isset( $switchImgMaxX ) ? $switchImgMaxX : $imgMaxX;
    $imgMaxY = isset($imgMaxY) && $imgMaxY != '' ? $imgMaxY : 0;
    $imgMaxY = isset( ${'g'.$groupNo.'_imgMaxY'} ) ? ${'g'.$groupNo.'_imgMaxY'} : $imgMaxY;
    $imgMaxY = isset( $switchImgMaxY ) ? $switchImgMaxY : $imgMaxY;
    $mcConf['imgPath'] = explode(',',$imgPath);
    $mcConf['imgMaxX'] = explode(',',$imgMaxX);
    $mcConf['imgMaxY'] = explode(',',$imgMaxY);
    if( isset($switchImgNum)) {
      $mcConf['imgNum'] = $switchImgNum;
    }

    $mcConf['thumbImgPath'] = isset($thumbImgPath) && $thumbImgPath != '' ? $thumbImgPath : false; //Thumbnail save path
    $mcConf['thumbImgPath'] = isset(${'g'.$groupNo.'_thumbImgPath'}) ? ${'g'.$groupNo.'_thumbImgPath'} : $mcConf['thumbImgPath'];
  }
  $modx->config['MobileConverterConf'] = $mcConf; //Value transport next event.

   break;

   //--------------------------------------------------------------Convert charset and change image
 case 'OnWebPagePrerender':
   //Set value prev event
   $mcConf = $modx->config['MobileConverterConf'];

   //画像変換
   if( isset($mcConf['imgType'])){
     $modx->documentOutput = preg_replace_callback('/<img [^>]+>/i','MC_ChangeImgFilename',$modx->documentOutput);
   }
   
   // Convert charset
   if( $mcConf['enableCharConv'] == true){
     // Change HTTP header's Content-Type
     //------別の方法
     //$addHeader='';
     //$headers=headers_list(); 
     //foreach($headers as $val)
     //  if( strpos($val,'Content-Type:') !== false ){
     //   $addHeader=substr($val,0,strrpos($val,'=')+1) . $mobileCharset;
     //   break;
     //}
     //header($addHeader,true);

     $type= !empty($modx->contentTypes[$modx->documentIdentifier]) ? $modx->contentTypes[$modx->documentIdentifier] : "text/html";
     header('Content-Type: ' . $type . '; charset=' . $mcConf['charset'],true);

     // Shift_JIS -> SJIS     
     if( stripos($mcConf['charset'] , 'Shift_JIS') !== false) $mcConf['charset'] = 'SJIS';
     
     $modx->documentOutput = mb_convert_encoding($modx->documentOutput,$mcConf['charset'],$modx->config['modx_charset']);
   }

   break;
   
}
