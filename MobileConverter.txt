//------------------------------------------------------------------------
//
//  MobileConverter for MODX
//
//  Author  : soushi
//  Version : 2.01rc1
//
//  License : GPL
//
//------------------------------------------------------------------------

//--------This plugin name
$MyName=$modx->Event->activePlugin;
$MC='MobileConverter';

// Template
$TemplateNotFound=<<<_TPLNOTFOUND_
<html>
<head>
  <title>[(site_name)] | [*pagetitle*]</title>
  <meta http-equiv="Content-Type" content="text/html; charset=[+charset+]" />
  <base href="[(site_url)]" />
</head>
<body>
<h2>Template not found! -> [+template+]</h2>
/* Check the setting of plugin;-) */
</body>
</html>
_TPLNOTFOUND_;

//Image ext
$imgExts=array('jpe?g','gif','png','gif');
//image filename prefix
$imgPrefix='.mcthumb.'; 

// Debug mode
global $MC_debug;
$MC_debug = isset($debug) && ($debug == 1 || $debug == 'yes') ? true:false;

//------------------------------------------------------ Function
//-----------------------------------------------------
//  add Event function
//
//  $fEvent  : string : event name
//  $fPlugin : string : plugin name
//  return   : none   :
//
// *** information ***
// 一部バージョンの $modx->addEventListener はバグのダメ動作しない(modx <=0.9.6.2 ,modx = 1.0.0)
// またこの独自関数ではイベントが既に登録されている場合、追記しないようにした
//
//-----------------------------------------------------
if (!function_exists('addEvent')){
  function addEvent($fEvent,$fPlugin){
    global $modx;

    $el= &$modx->pluginEvent[$fEvent];
    if (empty ($el)){
      $modx->pluginEvent[$fEvent]= array ();
      $el= &$modx->pluginEvent[$fEvent];
    }
    foreach( $el as $val){
      if( $fPlugin == $val ){return;}
    }
    MC_pnt('Adding event',"Event:${fEvent}\nPlugin:${fPlugin}\n");
    array_push($el, $fPlugin);
  }
}

//-----------------------------------------------------
//  Print Eventlog function
//
//  $fSubject : string : event name
//  $fBody    : string : plugin name
//  $fMode    : int    : 0=error,1=debug(defult=1)
//  return    : none   :
//
//-----------------------------------------------------
if (!function_exists('MC_pnt')){
  function MC_pnt($fSubject,$fBody,$fMode=1){
    global $modx;
    global $MC_debug;

    if( $fMode == 0 || $MC_debug == true ){
      $prefix = '[' . (($fMode==1) ? "Debug" : "Error") . '] MobileConverter : ';
      $type = ($fMode==1) ? 1:3;
      $modx->logEvent(1, $type, highlight_string($fBody,true), $prefix.$fSubject);
    }
  }
}

//-----------------------------------------------------
//  Image chaange function("preg_replace_callback" function's callback)
//
//  $fMt   : array  : replace string
//  return : string : replace string
//
//-----------------------------------------------------
if (!function_exists('MC_ChangeImgFilename')){
  function MC_ChangeImgFilename($fMt){
    global $modx;

    $mcConf = $modx->config['MobileConverterConf'];
    
    if(! preg_match('/src=["\']([^"\']*?)?([^\/"\']+)\.([^\.\/"\'>]+)["\']/i',$fMt[0],$mt) ){
      if(! preg_match('/src=([^ \>]*\/)?([^ \/\>]+)\.([^\. \>]+)/i',$fMt[0],$mt) ){ // 「'"」で囲ってない場合
        return $fMt[0];
      }
    }
    $imgPath=$mt[1];
    $imgName=$mt[2];
    $imgExt=$mt[3];

    //Ext check
    $imgcheck=false;
    foreach( $mcConf['imgExts'] as $val)
      if( preg_match('/'.$val.'$/i',$imgExt) ){
	$imgcheck=true;
	break;
      }
    if($imgcheck != true ) return $fMt[0];

    //変換対象のパス確認
    $flag=false;
    foreach( $mcConf['imgPath'] as $key => $val ){
      if( $val == '/' || strstr($imgPath,$val) !== false){
	$imgNo = $key;
	$flag = true;
	break;
      }
    }
    if(! $flag ) return $fMt[0];

    //本体画像の存在確認
    $realFile = realpath(MODX_BASE_PATH . $imgPath . $imgName . '.' . $imgExt );
    if(! is_file($realFile) ){
      return $fMt[0];
    }
    $realFileTime = filemtime($realFile); //ファイルの更新時間

    //拡張子の調整
    $tmpImgType=isset($mcConf['imgType'][$imgNo])?$mcConf['imgType'][$imgNo]:$mcConf['imgType'][0];
    if( $tmpImgType != 'inherit' ){
      $imgExt=$tmpImgType;
    }

    //パスの計算
    if( isset($mcConf['imgNum'])){
      $addNum = $mcConf['imgNum'].'_';
    }else{
      $addNum = '';
    }
    if( $mcConf['thumbImgPath'] === false ){
      $chgFile = $imgPath . $mcConf['imgPrefix'] . $mcConf['groupNo'] . '_' . $addNum . $imgName .'.'. $imgExt;
    }else{
      $chgFile = $mcConf['thumbImgPath'] . $mcConf['imgPrefix'] . $mcConf['groupNo'] . '_' . $addNum . str_replace('/','_',$imgPath).$imgName .'.'. $imgExt;
    }
    //$realChgFile = realpath(MODX_BASE_PATH . $chgFile); //realpathでエラーがでるため一時コメントアウト
    $realChgFile = MODX_BASE_PATH . $chgFile;

    //変換画像作成
    if(! is_file($realChgFile)  || is_file($realChgFile) && filemtime($realChgFile) < $realFileTime ){      

      $img=imagecreatefromstring(file_get_contents($realFile));
      //リサイズ計算
      if( isset($mcConf['imgMaxX'][$imgNo]) ){
	$maxX = $mcConf['imgMaxX'][$imgNo];
      }else{
	$maxX = $mcConf['imgMaxX'][0]; //配列がなければ0をデフォルトの値にする
      }
      if( isset($mcConf['imgMaxY'][$imgNo]) ){
	$maxY = $mcConf['imgMaxY'][$imgNo];
      }else{
	$maxY = $mcConf['imgMaxY'][0]; //配列がなければ0をデフォルトの値にする
      }
      $imgX = imagesx($img);
      $imgY = imagesy($img);
      $toX=$imgX;
      $toY=$imgY;
      $percentFlag=false;
      //パーセントで拡大縮小
      if( substr($maxX,-1) == '%' ){
	$toX = (int)($imgX * ( (int)substr($maxX,0,-1) / 100 ));
	$percentFlag=true;
      }
      if( substr($maxY,-1) == '%' ){
	$toY = (int)($imgY * ( (int)substr($maxY,0,-1) / 100 ));
	$percentFlag=true;
      }
      //ピクセルで縮小	
      if( ! $percentFlag ){
	if( $maxX != 0 && $maxX < $imgX ){
	  $toX = $maxX;
	  $toY = (int)($imgY * ($maxX / $imgX));
	}
	if( $maxY != 0 && $maxY < $imgY ){
	  $tmpX = (int)($imgX * ($maxY / $imgY));
	  if( $maxX > $tmpX ){
	    $toX = $tmpX;
	    $toY = $maxY;
	  }
	}
      }
      if( $toX != 0 && $toY != 0){ //リサイズ実行
	$newimg=imagecreatetruecolor($toX,$toY);       
	imagecopyresampled($newimg,$img,0,0,0,0,$toX,$toY,$imgX,$imgY);
	imagedestroy($img);
	$img = $newimg;
      }

      switch($imgExt){
      case 'gif': // make gif	
	if( function_exists('imagegif'))
	  if( ! imagegif($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make gif image:'.$realChgFile, 'MobileConverter');
	break;
      case 'png': // make png
	if( function_exists('imagepng'))
	  if( ! imagepng($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make png image:'.$realChgFile, 'MobileConverter');
	break;
      case 'jpg':
      case 'jpeg':// make jpg
	if( function_exists('imagejpeg'))
	  if( ! imagejpeg($img,$realChgFile))
	    $modx->logEvent(1, 1, 'Failed make jpg image:'.$realChgFile, 'MobileConverter');
	break;
      }
    }

    $newA = preg_replace('/src=["\']?[^"\' >]+["\']?/i',"src='$chgFile'",$fMt[0]);
    //erase height and width 
    $newA = preg_replace('/width=[^ >]+/i','',$newA);
    $newA = preg_replace('/height=[^ >]+/i','',$newA);

    return $newA;

  }
}

//---------------------------------------------------------- Main

//------------------------------------------------------ イベントの追加
if( $this->Event->name == 'OnWebPageInit' || $this->Event->name == 'OnPageNotFound'){
  addEvent('OnLoadWebDocument', $MyName);
  addEvent('OnLoadWebPageCache', $MyName);
}

//------------------------------------------------------ グループ、ルールのマッチ処理
if( $this->Event->name == 'OnLoadWebDocument' ||
    $this->Event->name == 'OnLoadWebPageCache' ||
    $this->Event->name == 'OnPageNotFound'){
  
  $id = $this->documentIdentifier; //Current document id

  // トップ階層までリソースIDを求める
  $ids = array();
  array_push($ids,$id);
  while( $id != 0 ){
    $parentData = $modx->getParent($id,0,'id');
    if(! $parentData ){
      break;
    }    
    $id = $parentData['id'];
    array_push($ids,$id);
  }
  MC_pnt('Target IDs','$ids='."\n".print_r($ids,true));

  $mcFlag=false;
  for( $i=1 ; isset(${'g'.$i.'_targetDoc'}) || isset(${'g'.$i.'_targetTemplate'});$i++ ){
    //リソースIDかテンプレートのターゲット判定(テンプレート優先で排他制御)
    if( isset(${'g'.$i.'_targetTemplate'}) ){
      //テンプレートがターゲットになるか判定
      $sql = 'SELECT c.id, t.templatename 
              FROM  '.$modx->getFullTableName("site_content")  .' as c,
                    '.$modx->getFullTableName("site_templates").' as t
              WHERE c.template = t.id
                AND c.id = '.(int)$ids[0];
      MC_pnt('Template check SQL','SQL:'.$sql);
      $rs = $this->db->query($sql);
      if( $row = $this->db->getRow($rs) ){
        if( $row['templatename'] == ${'g'.$i.'_targetTemplate'}){
          MC_pnt('Template match!','$temp1:'.${'g'.$i.'_targetTemplate'}."\n".'$temp2:'.$row['templatename']);
          $mcFlag= true;
        }
      }
    }else{
      //リソースがターゲットになるか判定
      if( ${'g'.$i.'_targetDoc'} == '' || (string)${'g'.$i.'_targetDoc'} == '0'){
        // 0の場合はON判定
        $mcFlag= true;
      }else{
        $targetDocs=explode(',',${'g'.$i.'_targetDoc'});
        foreach ($targetDocs as $targetDoc){
          if(! preg_match('/^[+-]?[0-9]+[rR]?$/',$targetDoc)){
            MC_pnt('Syntax error in target resouse(document) IDs','$targetDoc:'.$targetDoc,0);
            continue;
          }
          $keyPos = stripos($targetDoc,'r');
          if( $keyPos !== false){
            $recFlag = substr($targetDoc,-1,1); //後ろの記号を取得
            $targetDoc = substr($targetDoc,0,-1); //後ろのrRは削除
          }else{
            //再帰不要なとき
            if( $targetDoc == 0 || $ids[0] == $targetDoc){
              $mcFlag=true;
            }elseif( $targetDoc < 0 && $ids[0] == abs($targetDoc)){
              $mcFlag=false;
            }	    
            continue;
          }
          //再帰が必要なとき
          foreach( $ids as $id ){
            if( $recFlag == 'R' && $ids[0] == $id ){ continue; } //大文字Rの時は対象ドキュメントを含まない
            if( $targetDoc >= 0 && $id == $targetDoc ){
              $mcFlag=true;
              break;
            }
            if( $targetDoc < 0 && $id == abs($targetDoc)){
              $mcFlag=false;
              break;
            }    	  	  
          }
        }
      }
    }
    if( $mcFlag == true ){
      MC_pnt('Resouce Match!',"Group:$i\nResource:${ids[0]}\n");
      //該当グループのルールにマッチするか判定
      $targetVal = isset(${'g'.$i.'_targetKey'}) ? $_SERVER[${'g'.$i.'_targetKey'}] : $_SERVER['HTTP_USER_AGENT'];
      //while( isset(${'g'.$i.'_'.$j.'_matchStr'}) ){
      for( $j=1; isset(${'g'.$i.'_'.$j.'_matchStr'}) ;$j++){
        $matchStrs = ${'g'.$i.'_'.$j.'_matchStr'};
        if( $matchStrs == '' ) continue;
        $matchStrs = str_replace('\,','\#44;',$matchStrs); // \,を置換
        $matchStrs = explode(',',$matchStrs);
        foreach ($matchStrs as $matchStr){
          $mcFlag = true; //ここでいったんtrue
          $matchStr = str_replace('\#44;',',',$matchStr);  // ,に戻す
          $matchStr = str_replace('\+','\#43;',$matchStr); // \|を置換
          $matchSubStrs = explode('+',$matchStr);
          foreach ($matchSubStrs as $matchSubStr){
            $matchSubStr = str_replace('\#43;','+',$matchSubStr);  // |に戻す
            if( stripos($matchSubStr,'/') === 0 ){
              //正規表現処理
              if( preg_match($matchSubStr,$targetVal) != 0 ){continue;}
            }else{
              //普通のマッチ処理
              if( stripos($matchSubStr,'\/') === 0 ){ // 先頭の\/の処理
                $matchSubStr = substr($matchSubStr,1);
              }
              if( stristr($targetVal,$matchSubStr) !== false ){continue;}
            }
            $mcFlag = false;
          }
          if( $mcFlag == true ){
            $groupNo = $i;
            $ruleNo = $j;
            MC_pnt('Group,Rule match.',"groupno=$groupNo\nrule=$ruleNo\nAgent=$targetVal");
            break 3; //全てのループを抜ける
          }
        }	
      }
    }
  }
}

//------------------------------------------------------ 専用404ページの用意
if( $this->Event->name == 'OnPageNotFound' ){
  if( isset(${'g'.$groupNo.'_404Resource'}) && preg_match('/^[0-9]+$/',${'g'.$groupNo.'_404Resource'}) ){
    $this->config['error_page'] = ${'g'.$groupNo.'_404Resource'};
  }
}

//------------------------------------------------------ OnWebPagePrerenderイベント準備
if( $this->Event->name == 'OnLoadWebDocument' ||
    $this->Event->name == 'OnLoadWebPageCache'){

  unset($modx->config['MobileConverterConf']); ///2回実行対策(いらないかも)

  if( isset($groupNo) ){
    //次のイベントで利用する変数の決定
    $mcConf = array();    
    $mcConf['groupNo'] = $groupNo; //グループNo
    $mcConf['ruleNo'] = $ruleNo;   //ルールNo
    
    addEvent('OnWebPagePrerender', $MyName);
  }elseif( $enableCharConvIfnoElect == 'yes' ){ //文字コード変換だけ行う場合
    $mcConf = array();    
    $mcConf['enableCharConv'] = true;
    $mcConf['charset'] = isset($charset) ? $charset : 'Shift_JIS';
    addEvent('OnWebPagePrerender', $MyName);
  }
}

//------------------------------------------------------ テンプレート変換
if( isset($groupNo) && 
    ($this->Event->name == 'OnLoadWebDocument' ||
     $this->Event->name == 'OnLoadWebPageCache')){
  
  //※ここに独自のキャッシュ機能を入れたらいいかもしれない
  //  本気でやる場合、問題点として認証チェック、公開日チェック等も独自で実装する必要がある
  //  適当にやる場合テンプレートのキャッシュだけでいける(ただし、効果は微妙かもしれない)

  //キャッシュは強制的にOFF
  //※ONの場合、最初に使われたテンプレートがキャッシュされ、パターンにマッチしない場合、そちらが利用される
  $modx->documentObject['cacheable'] = 0;

  //テンプレートの読み込み
  $switchTemplate = ${'g'.$groupNo.'_'.$ruleNo.'_template'};  
  $tbl = $modx->getFullTableName("site_templates");
  $whr = 'templatename=\''.$switchTemplate.'\'';
  if( $rs = $modx->db->select('id,content',$tbl,$whr) ){
    if( $resource = $modx->fetchRow($rs) ){
      $this->documentObject['template'] = $resource['id'];
      $this->documentContent =  $resource['content'];
    }else{
      MC_pnt('Template error','Template not found:'.$switchTemplate,0);
      $bf= array('[+charset+]','[+template+]');
      $af= array($modx->config['modx_charset'],$switchTemplate);
      $TemplateNotFound = str_replace($bf,$af,$TemplateNotFound);
      $this->documentContent =  $TemplateNotFound;	     
    }
  }

  //文字コードの決定
  $switchCharset  = ${'g'.$groupNo.'_'.$ruleNo.'_charset'};
  if( $switchCharset != '' ){
    $mcConf['charset'] = $switchCharset;
  }else{
    $mcConf['charset'] = isset($charset) ? $charset : 'Shift_JIS';
  }

  //文字コード変換の有無
  if( ${'g'.$groupNo.'_'.$ruleNo.'_enableCharConv'} == 'no' ){
    $mcConf['enableCharConv'] = false;
  }else{
    $mcConf['enableCharConv'] = true;
  }

  //画像変換の情報決定
  $switchImgType  = ${'g'.$groupNo.'_'.$ruleNo.'_imgType'};
  if( isset($switchImgType) && $switchImgType != '' ){
    $mcConf['imgType'] = explode(',',$switchImgType);
    $mcConf['imgExts'] = $imgExts;
    $mcConf['imgPrefix'] = $imgPrefix;

    $imgPath = isset($imgPath) && $imgPath != '' ? $imgPath : '/';
    $imgPath = isset( ${'g'.$groupNo.'_imgPath'} ) ? ${'g'.$groupNo.'_imgPath'} : $imgPath;

    $imgMaxX = isset($imgMaxX) && $imgMaxX != '' ? $imgMaxX : 0;
    $imgMaxX = isset( ${'g'.$groupNo.'_imgMaxX'} ) ? ${'g'.$groupNo.'_imgMaxX'} : $imgMaxX;
    $imgMaxX = isset( ${'g'.$groupNo.'_'.$ruleNo.'_imgMaxX'} ) ? ${'g'.$groupNo.'_'.$ruleNo.'_imgMaxX'} : $imgMaxX;

    $imgMaxY = isset($imgMaxY) && $imgMaxY != '' ? $imgMaxY : 0;
    $imgMaxY = isset( ${'g'.$groupNo.'_imgMaxY'} ) ? ${'g'.$groupNo.'_imgMaxY'} : $imgMaxY;
    $imgMaxY = isset( ${'g'.$groupNo.'_'.$ruleNo.'_imgMaxY'} ) ? ${'g'.$groupNo.'_'.$ruleNo.'_imgMaxY'} : $imgMaxY;

    $mcConf['imgPath'] = explode(',',$imgPath);
    $mcConf['imgMaxX'] = explode(',',$imgMaxX);
    $mcConf['imgMaxY'] = explode(',',$imgMaxY);
    if( isset(${'g'.$groupNo.'_'.$ruleNo.'_imgMaxX'}) || isset(${'g'.$groupNo.'_'.$ruleNo.'_imgMaxY'})){
      $mcConf['imgNum'] = $ruleNo;;
    }

    $mcConf['thumbImgPath'] = isset($thumbImgPath) && $thumbImgPath != '' ? $thumbImgPath : false; //Thumbnail save path
    $mcConf['thumbImgPath'] = isset(${'g'.$groupNo.'_thumbImgPath'}) ? ${'g'.$groupNo.'_thumbImgPath'} : $mcConf['thumbImgPath'];
  }
  $modx->config['MobileConverterConf'] = $mcConf; //Value transport next event.

  //OnLoadWebPageCache時はparserを一度も通らないので実行
  if( $modx->Event->name == 'OnLoadWebPageCache'){
    $this->documentContent= $this->parseDocumentSource($this->documentContent);
  }

}

//------------------------------------------------------ 画像変換、文字コード変換
if( $this->Event->name == 'OnWebPagePrerender' ){

   //Set value prev event
   $mcConf = $modx->config['MobileConverterConf'];

   //画像変換
   if( isset($mcConf['imgType'])){
     $modx->documentOutput = preg_replace_callback('/<img [^>]+>/i','MC_ChangeImgFilename',$modx->documentOutput);
   }
   
   // Convert charset
   if( $mcConf['enableCharConv'] == true){
     // Change HTTP header's Content-Type
     //------別の方法
     //$addHeader='';
     //$headers=headers_list(); 
     //foreach($headers as $val)
     //  if( strpos($val,'Content-Type:') !== false ){
     //   $addHeader=substr($val,0,strrpos($val,'=')+1) . $mobileCharset;
     //   break;
     //}
     //header($addHeader,true);

     $type= !empty($modx->contentTypes[$modx->documentIdentifier]) ? $modx->contentTypes[$modx->documentIdentifier] : "text/html";
     header('Content-Type: ' . $type . '; charset=' . $mcConf['charset'],true);

     // Shift_JIS -> SJIS     
     if( stripos($mcConf['charset'] , 'Shift_JIS') !== false) $mcConf['charset'] = 'SJIS';
     
     $modx->documentOutput = mb_convert_encoding($modx->documentOutput,$mcConf['charset'],$modx->config['modx_charset']);
   }   
}
